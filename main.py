import telebot
from telebot import types
import mysql.connector
import hashlib
import sqlite3

# Telebot bot
API_TOKEN = '6268661496:AAH1ofEEaKFcEsxcJhikMM4KzYTtzUxe-mw'
bot = telebot.TeleBot(API_TOKEN)

db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="12345",
    database="database_2"
)
cursor = db.cursor()


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, 'If you want to use the functionality of this bot press buttons in the bottom\n '
                                      'also you can type a this symbol and do it manually "/"')


@bot.message_handler(commands=['start'])
def login(message):
    user_id = message.chat.id
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø technoboost bot. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä? –ü—Ä–æ–ø–∏—à–∏—Ç–µ /catalog –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π "
                     "—Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö"
                     "–∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /budget —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–µ–∑–∞—é—Ç –≤ –≤–∞—à –±—é–¥–∂–µ—Ç")
    if is_user_logged_in(user_id):
        bot.send_message(message.chat.id, 'You has a current account\n'
                                          'Enter your login')
        bot.register_next_step_handler(message, sign_in_process_username)
    else:
        bot.send_message(message.chat.id, 'You have to register\n''Enter login')
        bot.register_next_step_handler(message, process_username_step)


def is_user_logged_in(user_id):
    cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (user_id,))
    return cursor.fetchone() is not None


def process_username_step(message):
    username = message.text
    print(username)
    while is_username_taken(username):
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, process_password_step, username)


def process_password_step(message, username):
    password = message.text
    print(password)
    hashed_password = hashlib.md5(password.encode()).hexdigest()
    cursor.execute("INSERT INTO users (telegram_id, username, password_hash) VALUES (%s, %s, %s)",
                   (message.from_user.id, username, hashed_password))
    db.commit()
    bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
    start(message)


def is_username_taken(username):
    cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
    return cursor.fetchone() is not None


# Sign in

def sign_in_process_username(message):
    username = message.text
    print(username)
    if username_check_sign_in(username):
        bot.send_message(message.chat.id, "Type a password")
        bot.register_next_step_handler(message, sign_in_process_password, username)

    else:
        bot.send_message(message.chat.id, "Incorrect username, try again. /start")
        return


def sign_in_process_password(message, username):
    password = message.text
    password_hash = hashlib.md5(password.encode()).hexdigest()

    if is_password_right(username, password_hash, message):
        bot.send_message(message.chat.id, "You successfully logged in")


def username_check_sign_in(username):
    cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
    return cursor.fetchone() is not None


def is_password_right(username, password_hash, message):
    cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
    user_data = cursor.fetchone()

    if user_data:
        stored_password_hash = user_data[1]  # Assuming the password hash is stored in the second column
        if password_hash == stored_password_hash:
            return True  # Authentication successful
        else:
            bot.send_message(message.chat.id, "Incorrect password")  # Incorrect password
    else:
        bot.send_message(message.chat.id, "User not found")  # User not found
    return False


def start(message):
    message_text = (
        '<b>Hello! This bot can do many functions like:</b>\n'
        'üíµ Exchange Rates\n'
        'üßÆ Calculator\n'
        'üí≥ Online payment\n'
        'üóÇ Show products that you want to buy'
    )

    bot.send_message(chat_id=message.chat.id, text=message_text, parse_mode='html')
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    bt1 = types.KeyboardButton(text="üíµ Exchange Rates")
    bt3 = types.KeyboardButton(text="üõç Catalog")
    bt4 = types.KeyboardButton(text="‚öôÔ∏èSettings")
    kb.add(bt1, bt3, bt4)
    bot.send_message(message.chat.id, 'Choose what you want', reply_markup=kb)


admins = [1773177526, 919921601]


@bot.message_handler(commands=['show_all_users'])
def show_all_users(message):
    state = False
    for i in range(len(admins)):
        if message.chat.id in admins:
            state = True
            break
        else:
            continue

    if not state:
        return bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –°–æ–∑–¥–∞—Ç–µ–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞—é—Ç –º–Ω–µ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–µ–∑–Ω–∞–∫–æ–º—ã–º–∏ '
                                                 '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
    cursor.execute("SELECT * FROM users")
    all_users = cursor.fetchall()
    for user in all_users:
        bot.send_message(message.chat.id, str(user))


@bot.message_handler(func=lambda message: '‚öôÔ∏èSettings' in message.text)
def handle_settings(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    item1 = types.KeyboardButton("Change the username")
    item2 = types.KeyboardButton("Change the password")
    item3 = types.KeyboardButton("add number phone")
    back = types.KeyboardButton("Back to Main Menu")

    markup.add(item1, item2, item3, back)
    bot.send_message(message.chat.id, "Choose an option:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "Change the username")
def handle_option1(message):
    cursor.execute("SELECT FROM users where username")
    bot.send_message(message.chat.id, "You selected Option 1.")


@bot.message_handler(func=lambda message: message.text == "Change the password")
def handle_option2(message):
    cursor.execute("SELECT FROM users where username")
    bot.send_message(message.chat.id, "You selected Option 2.")


@bot.message_handler(func=lambda message: message.text == "add number phone")
def handle_option3(message):
    bot.send_message(message.chat.id, "You selected Option 3.")


@bot.message_handler(func=lambda message: message.text == "Back to Main Menu")
def handle_back(message):
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "Back to the main menu.", reply_markup=markup)


@bot.message_handler(func=lambda message: 'üõç Catalog' in message.text)
def handle_catalog(message):
    # –∑–¥–µ—Å—å –∫–æ–Ω–Ω–µ–∫—Ç –∫ –Ω–∞—à–∏–º –¥–∞—Ç–∞–±–µ–π–∑–∞–º
    conn = sqlite3.connect('catalog.db')
    cursor = conn.cursor()

    # –∑–¥–µ—Å—å —Ç–µ–ª–µ–≥–∞ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç–∞–±–∞–∑
    cursor.execute('SELECT name, price, link FROM products')
    products = cursor.fetchall()

    # –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ç–∞–ª–æ–≥–∞. if products –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—É—Å—Ç–æ –ª–∏ –≤ –¥–∞—Ç–∞ –±–∞–∑–∞—Ö. for –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ
    # –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –≤ –¥–∞—Ç–∞ –±–∞–∑–∞—Ö. tovar –¥–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏, bot.send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π tovar
    if products:
        for product in products:
            tovar = f"{product[0]}\n–¶–µ–Ω–∞: {product[1]} —Ç–µ–Ω–≥–µ\n–°—Å—ã–ª–∫–∞: {product[2]}\n\n"
            bot.send_message(message.chat.id, tovar)
    else:
        bot.send_message(message.chat.id, "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")

    conn.close()


@bot.message_handler()
def get_messages(message):
    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}', parse_mode='html')
    else:
        bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', parse_mode='html')


try:
    bot.polling()
except Exception as e:
    print(f"Error: {e}")
